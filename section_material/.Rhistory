q()
q()
5=3
5+3
5*2
print(2)
a-3
a=3
print(3)
print(a)
seq(1,10)
seq(1.1,11.1,by 2)
seq(1.1,11.1,by =2)
length(myOtherSeq)
length("asf")
rep(4,6)
help(rnorm)
rnorm(5)
rnorm(5)
rnorm(5,1,1)
cat(chars,sep="\n")
bools <- c(TRUE, FALSE, TRUE)
bools
bools <-(T,F,T)
bools <- c(T,F,T)
bools
vals <- seq(2,12,by =2)
vals
bals(3:5)
val[3:5]
vals[3:5]
vals[c(1,3,6)
]
val[-c()1,3,6]
vals[-c(1,3,6)]
vals[c(T,F)]
vals[1,2]=0
vals[1,2] <- 0
x=3
x
va=[1,2]
va = [1,2]
rnorm(10)
x<0
x=rnorm(10)
x
x<0
x[x<0]
x<-c(1,2,3,4)
y<-rep(2,4)
2/y
x/y
help(sample)
3==4
3=4
a=3
a
b<-4
b
b<-[1,2]
b<- [1,2]
b <- [1,2]
c<-[1,2]
b<-(1,2)
b=c[1,2]
b<- c[1,2]
load("C:/Users/Zirui/src/stat133/assignments/hw1/family.rda")
load("C:/Users/Zirui/src/stat133/assignments/hw1/family.rda")
x=seq(2,200,by=2)
x=seq(2,200,by=2)
# Create the variable
x=seq(2,200,by=2)
x
?paste
paste("A",1:6,sep=="")
paste("A",1:6)
z=paste("hw",1:20)
z=paste("hw",1:20)
papa
a
z
paste("hw",1:6,sep="")
z=paste("hw",1:20,sep="")
z
# << z >> : a vector of length 20 with character entries, "hw1", "hw2", ..., "hw20"
z
# Create the variable
# << z >> : a vector of length 20 with character entries, "hw1", "hw2", ..., "hw20"
zz=paste("hw",1:20,sep="")
z=paste("hw",1:20,sep="")
z
zz
z
?set.seed
# Create the variable
# << m >> : a vector of length 100 with entries from a standard normal distribution
set.seed(42)
set.seed(42)
m=norm(100)
norm(100)
m=rnorm(100)
m
m
m
m
set.seed(42)
m=rnorm(100)
m
m
mean.m=m[1:100]/100
mean.m
set.seed(42)
m=rnorm(100)
# Create the variable
# << mean.m >> : a scalar, the mean of the numbers in << m >>
mean.m=m[1:100]/100
m
mean.m=mean(m)
mean.m
# << m >> : a vector of length 100 with entries from a standard normal distribution
set.seed(42)
m=rnorm(100)
# Create the variable
# << mean.m >> : a scalar, the mean of the numbers in << m >>
mean.m=mean(m)
m
mean.m
sd.m=var(m)
sd.m
sd.n=sd(m)
sd.n
max.m=max(m)
max.m
setwd("C:/Users/Zirui/src/stat133/assignments/hw1")
load("family.rda")
class(family)
family
family.men=family[family$gender==m]
family$gender==m
family$gender=="m"
family.men=family$gender=="m"
family.men
family.men=[family$gender=="m",]
family.men=family[family$gender=="m",]
family.men
family.young=family[family$age<40,]
family.young
family
family.30y68i=family[family$age>30 and family$height<68,]
family.30y68i=family[family$age>30 and family$height<68,]
family.30y68i=family[family$age>30|family$height<68,]
family
family.30y68i
?logic
?|
help(|)
?and
?or
family.30y68i=family[family$age>30&family$height<68,]
family.30y68i
bmi=family$weight/family$height^2*703
bmi
family2=family+bmi
# << family2 >> : family with an added column of BMI, with column name bmi
family2=family
family2
family2$bmi=bmi
family2
seq(1,100,2)
2:200
load("WR1500MeterMen.Rda")
setwd("C:/Users/Zirui/src/stat133/assignments/hw2")
load("WR1500MeterMen.Rda")
wr.name=wr1500m[min(wr1500m$times),"athlete"]
wr.name <- wr1500m$athlete[wr1500m$times == min(wr1500m$times)]
plot(wr1500m$year,wr1500m$times, "l")
times_sec=wr1500m$times+180
wr1500m$times_sec=times_sec
plot(wr1500m$year,wr1500m$times_sec, "s", xlab="year", ylab="record times")
?abline
?line
load("SummerOlympics2012Ctry.Rda")
plot(SO2012Ctry$GDP,SO2012Ctry$pop,"p")
GDP_per_person=SO2012Ctry$GDP/SO2012Ctry$pop
# SO2012Ctry <- your code here
SO2012Ctry$GDP_per_person=GDP_per_person
# symbols( your code here )
symbols(log10(SO2012Ctry$pop),log10(SO2012Ctry$GDP_per_person),circles=SO2012Ctry$Total)
?symbols
load("London2012ALL_ATHLETES.rda")
names(athletes)
n.athletes=nrow(athletes)
# How many women competed?
# What proportion of the participants were women?
# frac.women <- your code here
women_athletes=subset(athletes,athletes$Sex %in%"F")
n.women=nrow(women_athletes)
frac.women=n.women/n.athletes
# How many sports were there?
View(athletes)
View(athletes)
# n.sports <- your code here
n.sports=length(table(athletes$Sport))
#Q14. Make a barplot of Sport and Sex that emphasizes the
# important differences. To do this, first make a table of
# Sex by Sport. This will be the input to barplot().
# Make the barplot with the parameter beside = TRUE and
# and again with beside = FALSE. Determine which of these
# barplots provides the easiest comparison.
# athTab <- your code here
athTab=table(athletes$Sport,athletes$Sex)
athTab
table(athletes$Sex,athletes$Sport)
barplot(athTab,beside = TRUE)
barplot(athTab,beside = FALSE)
# what should beside be set to, T/F?
athTab2=table(athletes$Sex,athletes$Sport)
# make barplot
barplot(athTab2,beside = TRUE)
a=c("a","c","b","r","e")
a
b
b=a
sort(a)
order(b)
setwd("C:/Users/Zirui/src/stat133/section_material")
?which
a
which(a=="a")
which(a=="r")
mostCommonLetter=function(chvec){
chvec=gsub("[[:punct:]]+","",chvec)
chvec=gsub("[0-9]+","",chvec)
chvec=unlist(strsplit(chvec,""))
letter=unique(chvec)
num=c()
for (i in 1:length(letter))
{
num[i]=length(grep(letter[i],chvec))
}
names(num)=letter
}
mostCommonLetter=function(chvec){
chvec=gsub("[[:punct:]]+","",chvec)
chvec=gsub("[0-9]+","",chvec)
chvec=unlist(strsplit(chvec,""))
letter=unique(chvec)
num=c()
for (i in 1:length(letter))
{
num[i]=length(grep(letter[i],chvec))
}
names(num)=letters
}
mostCommonLetter=function(chvec){
chvec=gsub("[[:punct:]]+","",chvec)
chvec=gsub("[0-9]+","",chvec)
chvec=unlist(strsplit(chvec,""))
letter=unique(chvec)
num=c()
for (i in 1:length(letter))
{
num[i]=length(grep(letter[i],chvec))
}
names(num)=letter
num=sort(num,decreasing=T)
return(num)
}
mostCommonLetter("aabbccccdddd")
max(num)
a=mostCommonLetter("aabbccccdddd")
max(a)
which(a==max(a))
mostCommonLetter=function(chvec){
chvec=gsub("[[:punct:]]+","",chvec)
chvec=gsub("[0-9]+","",chvec)
chvec=unlist(strsplit(chvec,""))
letter=unique(chvec)
num=table(chvec)
num=sort(num,decreasing=T)
return(num)
}
a=mostCommonLetter("aabbccccdddd")
a
max(a)
mostCommonLetter=function(chvec){
chvec=gsub("[[:punct:]]+","",chvec)
chvec=gsub("[0-9]+","",chvec)
chvec=unlist(strsplit(chvec,""))
letter=unique(chvec)
num=table(chvec)
num=sort(num,decreasing=T)
return(length(which(num==max(num))))
}
a=mostCommonLetter("aabbccccdddd")
a
num
a
a
mostCommonLetter=function(chvec){
chvec=gsub("[[:punct:]]+","",chvec)
chvec=gsub("[0-9]+","",chvec)
chvec=unlist(strsplit(chvec,""))
letter=unique(chvec)
num=table(chvec)
num=sort(num,decreasing=T)
return(num)
}
a=mostCommonLetter("aabbccccdddd")
a
a[1]
names(a[1])
a(1)
mostCommonLetter=function(chvec){
chvec=gsub("[[:punct:]]+","",chvec)
chvec=gsub("[0-9]+","",chvec)
chvec=unlist(strsplit(chvec,""))
letter=unique(chvec)
num=table(chvec)
num=sort(num,decreasing=T)
return(names(num[which(num==max(num))]))
}
a=mostCommonLetter("aabbccccdddd")
a
disp
list(1,2,3)
data.frame(1,2,3)
data.frame(a=c(1,2,3),b=c("a","b","c"),c=c(3,4,5))
data.frame("a"=c(1,2,3),b=c("a","b","c"),c=c(3,4,5))
names(data.frame("a"=c(1,2,3),b=c("a","b","c"),c=c(3,4,5)))
?plot
?lines
?symbols
?hist
?par
lapply?
?lapply
?tapply
?lapply
?mapply
?apply
?tapply
tapply(c(1,2,3,4,5,6), index=c(4,5,3,2,6,1),FUN=function(x) x+1)
tapply(c(1,2,3,4,5,6),index=c(4,5,3,2,6,1),FUN=function(x) x+1)
tapply(c(1,2,3,4,5,6),INDEX=c(4,5,3,2,6,1),FUN=function(x) x+1)
tapply(c(1,2,3,4,5,6),INDEX=c(4,5,3,2,6,1),FUN=function(x) x+1)
x=c(3,4,2,6,1,5)
tapply(x,INDEX=order(x),FUN=function(x) x+1)
order(x)
order(3,2,4,1)
order(c(3,2,4,1))
sort(c(3,2,4,1))
x=c(3,4,2,6,1,5)
tapply(x,INDEX=order(x),FUN=function(x) x+1)
order(x)
tapply(x,INDEX=x,FUN=function(x) x+1)
?mapply
matrix=matrix(c(1:20),4,5)
matrix
add(3,4)
sum(1,2)
mapply(sum, matrix[,1], matrix[,2])
mapply(sum, matrix[,1])
sapply(1:10, sum)
10:1
sapply(1:10, 10:1,sum)
sapply(1:10, sum, 10:1)
?sapply
?apply
apply(matrix, 1, sum)
apply(matrix, c(1,2), sum)
matrix=matrix(1:20,4,5)
apply(matrix, c(1,2), fun(x) x+1)
apply(matrix, c(1,2), function(x) x+1)
apply(matrix,1, function(x) x+1)
apply(matrix,2, function(x) x+1)
1:4 +1
?predict
gregexpr("asfasfasfasfa","a")
?gregexpr
gregexpr("a","asfasfasfasfa")
