xUnique = 1:5
trueCoeff = c(0, 1, 1)
getData = function(coefs = c(0, 1, 1), xs = 1:5, dupl = 10,
sd = 5, seed=2222){
### This function creates the artificial data
set.seed(seed)
x = rep(xs, each = dupl)
y = coefs[1] + coefs[2]*x + coefs[3] * x^2 +
rnorm(length(x), 0, sd)
return(data.frame(x, y))
}
a=getData
rm(a)
a=getData()
View(a)
?sample
?tapp;y
?tapply
tapply(c(1:10),fun=max)
tapply(c(1:10),index=c(1:10),fun=max)
tapply(c(1:10),c(1:10),fun=max)
tapply(c(1:10),c(1:10),max)
tapply(c(1:10),c(1:10),max)
tapply(c(1:10),c(1:5),max)
tapply(c(1:10),c(1:5),max)
n <- 17; fac <- factor(rep(1:3, length = n), levels = 1:5)
table(fac)
fac
tapply(1:n, fac, sum)
View(a)
?sample
?tapply
genBootY = function(x, y, rep = TRUE){
### For each unique x value, take a sample of the
### corresponding y values, with replacement.
### Return a vector of random y values the same length as y
### You can assume that the xs are sorted
### Hint use tapply here!
fun=function(y)
sample(y,length(y),replace=T)
tapply(y,x,fun)
}
genBootY = function(x, y, rep = TRUE){
### For each unique x value, take a sample of the
### corresponding y values, with replacement.
### Return a vector of random y values the same length as y
### You can assume that the xs are sorted
### Hint use tapply here!
fun=function(y)
sample(y,length(y),replace=T)
return(tapply(y,x,fun))
}
genBootY(1,c(1:10))
genBootY(rep(1,10),c(1:10))
rep(1,10)
genBootY(rep(1,10),c(1:10))
rep(1,10)
genBootY(rep(1,10),c(1:10))
?tapply
genBootY(rep(c(1,2),10),c(1:20))
rep(c(1,2),10)
a=getData()
xUnique = 1:5
trueCoeff = c(0, 1, 1)
getData = function(coefs = c(0, 1, 1), xs = 1:5, dupl = 10,
sd = 5, seed=2222){
### This function creates the artificial data
set.seed(seed)
x = rep(xs, each = dupl)
y = coefs[1] + coefs[2]*x + coefs[3] * x^2 +
rnorm(length(x), 0, sd)
return(data.frame(x, y))
}
###
genBootY = function(x, y, rep = TRUE){
### For each unique x value, take a sample of the
### corresponding y values, with replacement.
### Return a vector of random y values the same length as y
### You can assume that the xs are sorted
### Hint use tapply here!
fun=function(y)
sample(y,length(y),replace=T)
return(tapply(y,x,fun))
}
a=getData
a=getData()
View(a)
x=a$x
y=a$y
x
y
genBootY(x,y)
class(genBootY(x,y))
class(genBootY(x,y))[1]
genBootY(x,y)[1]
genBootY(x,y)[2]
genBootR = function(fit, err, rep = TRUE){
### Sample the errors
### Add the errors to the fit to create a y vector
### Return a vector of y values the same length as fit
### HINT: It can be easier to sample the indices than the values
return(fit+sample(err,length(fit)))
}
fit=c(1:10)
err=rnorm(100)
genBootR = function(fit, err, rep = TRUE){
### Sample the errors
### Add the errors to the fit to create a y vector
### Return a vector of y values the same length as fit
### HINT: It can be easier to sample the indices than the values
return(fit+sample(err,length(fit)))
}
genBootR(fit,err)
?lm
?I
I(1)
I(x)
x
I(x^2)
x
y
lm(y~x+x^2)
lm(y~x+I(x^2)
)
fitModel = function(x, y, degree = 1){
### use the lm function to fit a line or a quadratic
### e.g. y ~ x or y ~ x + I(x^2)
### y and x are numeric vectors of the same length
### Return the coefficients as a vector
### HINT: Take a look at the repBoot function to see how to use lm()
if (degree==1)
coeff=lm(y~x)$coefficients
else
coeff=lm(y~x+I(x^2))
return(coeff)$coefficients
}
fitModel = function(x, y, degree = 1){
### use the lm function to fit a line or a quadratic
### e.g. y ~ x or y ~ x + I(x^2)
### y and x are numeric vectors of the same length
### Return the coefficients as a vector
### HINT: Take a look at the repBoot function to see how to use lm()
if (degree==1)
coeff=lm(y~x)$coefficients
else
coeff=lm(y~x+I(x^2))$coefficients
return(coeff)
}
fitModel(x,y)
fitModel(x,y,2)
x
y
