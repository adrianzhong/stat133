Text Data and Regular Expressions
========================================================
author: 
date: 
Text Data - Motivation
=============================
We start with four examples.
- Election Study
- State of Union Addresses
- Web behaviour
- Email (spam filter)

Election Study
=============================
We have the following data:
- Geographic Data – longitude and latitude of the county center
- Population Data from the census for each county
- Election results from 2008 for each county (scraped from a Website)

Geographic Data
==========
<doc xmlns:gml="http://www.opengis.net/gml">
<state>
<gml:name abbreviation="AL">ALABAMA</gml:name>
<county>
<gml:name>Autauga County</gml:name>
<gml:location>
<gml:coord>
<gml:X>-86641472</gml:X>
<gml:Y>32542207</gml:Y>
</gml:coord>
</gml:location>
</county>
<county>
<gml:name>Baldwin County</gml:name>
<gml:location>
<gml:coord>
<gml:X>-87754736</gml:X>
<gml:Y>30654881</gml:Y>
</gml:coord>
</gml:location>
</county>

Election results (vote counts)
====================
"countyName" "bushVote" "kerryVote"
"arizona,apache" 8068 15082
"arizona,cochise" 24828 16219
"arizona,coconino" 20619 26513
"arizona,gila" 10494 7107
"arizona,graham" 7302 3141
"arizona,greenlee" 1899 1146
"arizona,la paz" 3158 1849
"arizona,maricopa" 539776 403882
"arizona,mohave" 29608 16267
"arizona,navajo" 16474 14224
"arizona,pima" 138431 154291
"arizona,pinal" 34813 25652
"arizona,santa cruz" 4668 6909


Merging data from different sources
=============================
One problem that we have to resolve to match counties across 
sources arises from something as mundane as different spelling, capitalization, etc.
- Capitalization qui vs Qui
- County/Parish missing
- St. vs St
- DeWitt vs De Witt

Text mining (State of Union Addresses)
=============================
- How long are the speeches?  
- How do the distributions of certain words change over time?  
- Which presidents have given “similar” speeches?

File with Speeches : stateoftheunion1790-2012.txt

State of Union Addresses - Start of file
=============================
\*** 

State of the Union Address 
George Washington 
December 8, 1790 

Fellow-Citizens of the Senate and House of Representatives: 
In meeting you again I feel much satisfaction in being able to repeat my 
congratulations on the favorable prospects which continue to distinguish 
our public affairs. The abundant fruits of another year have blessed our 
country with plenty and with the means of a flourishing commerce.


Text mining State of Union Addresses
=============================
- All speeches in one large plain text file
- Each speech starts with “***” on a line followed by 3 lines of information about who gave the speech and when
- To mine the speeches, we want to create a word vector for each speech, which tracks the counts of how many times a particular word was said in each speech.
- Words such as nation, national, nations should collapse to the same “word”


Web behavior
=============================
Every time you visit a Web site, information is recorded about the visit: 
- the page visited, 
- date and time of visit
- browser used
- operating system
- IP address

Web log - two entries
=============================
169.237.46.168 - - [26/Jan/2004:10:47:58 -0800] 
"GET /stat141/Winter04 HTTP/1.1" 301 328 
"http://anson.ucdavis.edu/courses/" 
"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)”
 
169.237.46.168 - - [26/Jan/2004:10:47:58 -0800] 
"GET /stat141/Winter04/ HTTP/1.1" 200 2585 
"http://anson.ucdavis.edu/courses/" 
"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)"

Web log - structure
=============================
The information in the log has a lot of structure, for example the date always appears in square brackets. 

However, the information is not consistently separated by the same characters such as in a csv ﬁle, 
nor is it placed consistently in the same columns in the ﬁle.

Spam filtering: Anatomy of email message
=============================
Three parts of an email:
- header 
- body 
- attachments (optional)

Like regular mail, the header is the envelope and the body is the letter.  

The data is stored as plain text.

Email Anatomy
===================
Header
- date, sender, and subject 
- message id
- who are the carbon-copy recipients
- return path

SYNTAX –  KEY:VALUE

Example header
===================
```{r, eval=FALSE}
Date: Mon, 2 Feb 2004 22:16:19 -0800 (PST) 
From: nolan@stat.Berkeley.EDU 
X-X-Sender: nolan@kestrel.Berkeley.EDU 
To: Txxxx Uxxx <txxxx@uclink.berkeley.edu> 
Subject: Re: prof: did you receive my hw? 
In-Reply-To: <web-569552@calmail-st.berkeley.edu> 
Message-ID: <Pine.SOL.4.50.0402022216120.2296-100000@kestrel.Berkeley.EDU> 
References: <web-569552@calmail-st.berkeley.edu> 
MIME-Version: 1.0 
Content-Type: TEXT/PLAIN; charset=US-ASCII 
Status: O 
X-Status: 
X-Keywords: 
X-UID: 9079
```

Email
==================
Body is separated from the header by a single blank line. 
Attachment is included in the body of the message. 
To figure out what part of the body is the message and what part is an attachment mail programs use an Internet standard called MIME, Multipurpose Internet Mail Extensions. 

Content-Type: has value multipart when attachments are present
Content-Type: MULTIPART/Mixed;
 BOUNDARY="_===669732====calmail-me.berkeley.edu===_” 

Boundary key provides a special character string to mark the beginning and end of the message parts. 
The last component of the message is followed by a line containing the boundary string with two hyphens at the front and end of the string:
--_===669732====calmail-me.berkeley.edu===_-- 


What characteristics can you derive from the email?
=============================
- Sent in the early morning:
- Numeric 00 – 24 hour received
- Has an Re: in the subject line
- Logical: TRUE if Re: in subject line
- Funny words like v!@gra
- Logical: TRUE if punctuation in the middle of word
- Lots of YELLING IN THE EMAIL
- Numeric: proportion of characters that are capitals

Getting started in R - String manipulation functions
=============================
```{r, eval=FALSE}
# extract a portion of a character sting from text, beginning at first, ending at last
substring(text, first, last) 
# return the number of characters in a string
nchar(text)
# split the string into pieces using "split"" to divide it 
strsplit(x, split)
# splits into one character pieces
strsplit(x, “”)
# paste together strings separated by one blank
paste(x, y, z, …, sep = " ", collapse = NULL)
# convert upper-case char. to lower-case, or vice versa. Non-alphabetic char. are left unchanged
tolower(x) toupper(x)
```


One example - Back to the election data
=============================
A small problem
- County names in census file have no “.” after St, e.g. “St John”
- County names in geographic file do have the “.”, e.g. “St. John”
- Let’s find a way to update the county names in the census file to add the period after “St”

In R
===========================
```{r, eval=TRUE}
# Source these in to play with some regular expressions
cNames = c("Dewitt County", 
           "Lac qui Parle County", 
           "St John the Baptist Parish", 
           "Stone County")

test = cNames[3]
string = "The Slippery St Frances"
```


===========
```{r, eval=TRUE}
substring(test, 1, 2)
substring(test, 1, 2) == "St"
newName = paste("St.", substring(test, 3, nchar(test)), sep = "")

newName
```

===========
```{r, eval=TRUE}
substring(cNames, 1, 2) == "St"
substring(cNames, 1, 3)
substring(cNames, 1, 3) == "St "
```

===========
```{r, eval=TRUE}
newNames = cNames
whichRep = substring(cNames, 1, 3) == "St "
newNames[whichRep] = 
     paste("St. ", 
           substring(cNames[whichRep], 4, 
                     nchar(cNames[whichRep])), sep = "")
newNames
```

===========
```{r, eval=TRUE}
unlist(strsplit(string, " "))
unlist(strsplit(string, ""))
chars = unlist(strsplit(string, ""))
possible = which(chars == "S")
possible
```

===========
```{r, eval=TRUE}
substring(string, possible, possible + 2)
substring(string, possible, possible + 2) == "St "
gsub("St ", "St. ", cNames)
```

In R - New example
===========================
```{r, eval=TRUE}
funny = "rep1!c@ted"
subjectLines = c("Re: 90 days", "Fancy rep1!c@ted watches", "It's me")

strings = c("hi mabc", "abc", "abcd", "abccd",
            "abcabcdx", "cab", "abd", "cad")

htmlStr = "<html><head></head><body> <h1>This is a title</h1><para>And this is a short paragraph. It has two sentences.</para></body></html>"
```

===========
```{r, eval=TRUE}
grep("[[:alpha:]][[:digit:][:punct:]][[:alpha:]]", 
     subjectLines)
newStrings = gsub("'", "", subjectLines)
newStrings
```

===========
```{r, eval=TRUE}
grep("[[:alpha:]][[:digit:][:punct:]][[:alpha:]]", 
     newStrings)

gregexpr("[[:alpha:]][[:digit:][:punct:]][[:alpha:]]", 
     newStrings)
#[1] -1 12 -1
#attr(,"match.length")
#[1] -1  3 -1
#attr(,"useBytes")
#[1] TRUE
```

==========
```{r, eval=TRUE}
gregexpr("[[:alpha:]][[:digit:][:punct:]]+[[:alpha:]]",
         newStrings)
#[1] -1 9 -1
#attr(,"match.length")
#[1] -1  4 -1
#attr(,"useBytes")
#[1] TRUE
````

Test Data
=============================
> cNames
[1] "Dewitt County"             
[2] "Lac qui Parle County"      
[3] "St John the Baptist Parish"
[4] "Stone County”
> test = cNames[3]
One possible solution
> substring(test, 1, 2)
[1] "St"
> substring(test, 1, 2)  ==  "St"
[1] TRUE
> newName = 
paste("St.", 
      substring(test, 3, nchar(test)), 
      sep ="")

Do you see any problems with this?
Second possible solution
> substring(test, 1, 3)
[1] "St "
> substring(test, 1, 3)  ==  "St "
[1] TRUE
> newName = 
paste("St. ", 
      substring(test, 4, nchar(test)), 
      sep ="")

Do you see any problems with this?
Another idea
> string = "The Slippery St Frances"
> chars = unlist(strsplit(string, ""))
> chars
 [1] "T" "h" "e" " " "S" "l" "i" "p" "p" "e" "r"
[12] "y" " " "S" "t" " " "F" "r" "a" "n" "c" "e"  "s"
> possible = which(chars == "S")
> possible
[1]  5 14
> substring(string, possible, possible + 2)
[1] "Sli" "St "
> substring(string, possible, possible + 2) == "St "
[1] FALSE  TRUE
What are we doing here?
Look at each character
Check to see if it is “S”
If it is, then look at the next character(s)
This is the idea behind regular expressions

Regular Expressions
=============================

The regular expression “St ” is made up of three literal characters.  The regular expression matching engine does something very similar to what we just did.

         The Slippery St Frances
               ||       ||| 
Found S________||       |||
Followed by t?__| No    ||| 
Is it S?________| No ...||| Keep looking for S
Found S_________________|||
Followed by t?___________|| Yes
Followed by a blank?______| Yes - A match!

gsub in R
=============================

Luckily, we don’t actually need to write our own functions for replacement.  The R functions gsub() and sub() look for a pattern and replace it within a string with some other text.

The “g” in gsub() refers to global.  It changes all the matches, whereas sub() only replaces the first match (in each element – both gsub()  and sub are vectorized).

============

> gsub("St ", "St. ", cNames)
[1] "Dewitt County"              
[2] "Lac qui Parle County"       
[3] "St. John the Baptist Parish"
[4] "Stone County"


> strings = c("a test", "and one and one is two",
+              "one two three")

> gsub("one", "1", strings)
[1] "a test"  "and 1 and 1 is two"  "1 two three" 
      
> sub("one", "1", strings)
[1] "a test"  "and 1 and one is two"  "1 two three"   
Practice with (paste(), substring(), nchar(), strsplit()
Review
Last time we discussed four examples where we wished to process text files for information
We introduced a few functions in R that help with string manipulation.
We went through one example of how to find a string, “St ”, in text and replace it by “St. ”
Often we want to find a more general “pattern” – today we’ll discuss how to do that.
The Web log
169.237.46.168 - - [26/Jan/2004:10:47:58 -0800] 
"GET /stat141/Winter04 HTTP/1.1" 301 328 
"http://anson.ucdavis.edu/courses/" 
"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.1.4322)”
 
=============================
How to extract the day of month, month, and year from the log entry?
What features of the entry are useful?
Date is between [ ]
Day, month, year are separated by /
Year is separated from time by :
Regular Expressions to the Rescue
Regular Expressions
Regular expressions give us a powerful way of matching patterns in text data
Most importantly, we do this all programatically rather than by hand, so that we can easily reproduce our work if needed.
Many programming languages support the use of regular expressions.



=============================
  A regular expression (aka regex or regexp) is 
a sequence of characters that forms a search pattern.
Or : a pattern that describes a set of strings.  
  This set of patterns may be finite or infinite, depending on the particular regexp. 
 We say the regexp “matches” each element of that set. 
  For example, the regexp 
grey|gray 
matches both grey and gray, whereas 
^A.* 
matches any string starting with capital A.

=============================
The idea is similar to wildcards in UNIX, but with many more possibilities.
With regular expressions, we can
extract pieces of text – e.g., find all links in an HTML document
create variables from information found in text
clean and transform text into a uniform format, resolving inconsistencies in format between files
mine text by treating documents directly as data
“scrape” the web for data

Syntax:
Literal characters are matched only by the character itself.

A character class is matched by any single member of the specified class.  For example,
 [A-Z] 
is matched by any capital letter.

Modifiers operate on literal characters, character classes, or combinations of the two. For example ^ is an anchor that indicates the literal must appear at the beginning of the string

Warning
=============================
The syntax for regexps is extremely concise
 It can be overwhelming if you try to read it like you would regular text.  
Always break it down into these three components: literals, character classes, modifiers

How to find fake words? (rep1!c@ted 
What makes this different from a regular word?
Numbers and punctuation surrounded by letters
Concepts of “numbers”, “punctuation”, and “regular letters” get at the idea of equivalent characters or character classes.

Equivalent Characters
=============================
We can enumerate any collection of characters within [ ].  Example: [Tt]his
The character “-” when used within the character class pattern identifies a range.  Examples: [0-9], [A-Za-z]
If we put a caret (^) as the first character , this indicates that the equivalent characters are the complement of the enumerated characters. Example: [^0-9]



Equivalent Characters
=============================
 If we want to include the character “-” in the set of characters to match, put it at the beginning of the character set to avoid confusion.  Example: [-+][0-9]

Note that here we have created a pattern from a sequence of two sub-patterns.

Named Equivalence Classes

These can be used in conjunction with other characters, for example [[:digit:]_]
Return to rep1!c@ted  
  What will this match?

[[:alpha:]][[:digit:][:punct:]][[:alpha:]]

   Can you foresee any problems with it?
=============================

Functions that use Regular Expressions
=============================
  grep(pattern, x)  It looks for the regular expression in pattern in the character string(s) in x.  It returns the indices of the elements for which there was a match.
  gsub(pattern, replacement, x) Look the regular expression in pattern in x and replace the  matching characters with replacement (all occurrences) sub() works the same way but only replaces the first occurrence.


Functions that use Regular Expressions
=============================
  regexpr(pattern, text) returns an integer vector giving the starting position of the first match or -1 if there is none. The return value has an attribute "match.length", that gives the length of the matched text (or -1 for no match). 
 gregexpr(pattern,text)Returns the locations of all occurrences of the pattern in each element of text.  The return is a list.


> subjectLines
[1] "Re: 90 days" "Fancy rep1!c@ted watches" "It's me"                 
> grep("[[:alpha:]][[:digit:][:punct:]][[:alpha:]]", subjectLines)
[1] 2 3

We can either remove the apostrophe first:
> newString = gsub("'", "", subjectLines)
> grep("[[:alpha:]][[:digit:][:punct:]][[:alpha:]]",   newString)
[1] 2

Or we can specify the particular punctuation marks we’re looking for:

> grep("[[:alpha:]][[:digit:]!@#$%^&*():;?,.][[:alpha:]]", subjectLines)
[1] 2

gregexpr() shows exactly where the pattern was found:

> newString
[1] "Re: 90 days" "Fancy rep1!c@ted watches" "Its me"                  
> gregexpr("[[:alpha:]][[:digit:][:punct:]][[:alpha:]]", newString)
[[1]]
[1] -1
attr(,"match.length")
[1] -1
[[2]]
[1] 12
attr(,"match.length")
[1] 3
[[3]]
[1] -1
attr(,"match.length")
[1] -1


We didn’t find p1!c because it consists of four characters: a letter, a digit, a punctuation mark, and another letter.

To search for the more general pattern of any number of digits or punctuation marks between letters, we use

[[:alpha:]][[:digit:][:punct:]]+[[:alpha:]]

The plus sign indicates that members from the second character class (digits and punctuation) may appear one or more times.

The plus sign is an example of a meta character.
Meta characters
=============================




Meta characters that control how many times something is repeated



The position of a character in a pattern determines whether it is treated as a meta character.

Examples: [-+*/], [1-9]*

When you want to refer to one of these symbols literally, you need to precede it with a backslash (\).  However, this  already has a special meaning in R’s character strings -- it’s used to indicate control characters like newline (\n).

So, to refer to these symbols in R’s regular expressions, you need to precede them with two backslashes.

=============================
The characters for which you need to do this are:
. ^ $ + ? ( ) [ ] { } | \
Practice: Indicate which strings contain a match to the pattern
More Practice: Write a regular expression that matches

1. only the words “cat”, “at”, and “t”

2. The words “cat”, “caat”, “caaat”, and so on

3. “dog”, “Dog”, “dOg”, “doG”, “DOg”, etc. (i.e., the word dog in any combination of upper and lower case) anywhere in the string

4. Any number, with or without a decimal point

Greedy Matching
=============================
Be careful with patterns matching too much. 
The matching is greedy in that it matches as much as possible
For example: when trying to remove HTML tags from a document, the regular expression
  <.*>  will match too much but the regular expression  <[^>]*> will be just right.  Why?

