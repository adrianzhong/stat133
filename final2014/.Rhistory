plot(lstat,medv,pch=20)
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,pch="+")
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,pch=20)
abline(lm.fit,lwd=3,col="red")
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
class(predict(lm.fit))
plot(predict(lm.fit),residuals(lm.fit))
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit=lm(medv~lstat+age)
lm.fit=lm(medv~lstat+age)
summary(lm.fit)
lm.fit=lm(medv~.)
lm.fit=lm(medv~.Boston)
lm.fit=lm(medv~.,Boston)
summary(lm.fit)
summary(lm.fit)
livrary(car)
library(car)
install.packages("car")
library(car)
vif(lm.fit)
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=update(lm.fit, ~.-age)
summary(lm(medv~lstat*age),data=Boston)
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
plot(lm.fit1)
plot(lm.fit2)
plot(lm.fit1)
plot(lm.fit2)
lm.fit5=lm(medv~poly(lstat,5))
#3.6.2 Simple Linear Regression
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
lm.fit=lm(medv~lstat,Boston)
attach(Boston)
lm.fit=lm(medv~lstat)
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit) #to get a confidence interval for the coefficient estimates
#the prodict() function can be used to produce confidence intervals and
#prediction intervals for the prediction of medv for a given value of lstat
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval="confidence")
predict(lm.fit,data.frame(lstat=c(5,10,15)),interval="prediction")
#plot medv and lstat along with the least squares regression line using
#plot() and abline() functions
plot(lstat,medv,pch="+")
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,pch=20)
abline(lm.fit,lwd=3,col="red")
plot(1:20,1:20,pch=1:20)
#diagnositc plots
#it is convenient to view all four plots together and can be achieved by
#using par() function which tells R to split the daiplay screen into
#separate panels so they can be viewed simultaneously
par(mfrow=c(2,2))
plot(lm.fit)
#we can compute the residuals from a linear regression fit using the
#residuals(). the rstudent() will return the srudentized residuals, and
#we can use this function to plot the residuals against fitted value
plot(predict(lm.fit),residuals(lm.fit))
plot(predict(lm.fit),rstudent(lm.fit))
#Leverage statistics can be computed for any number of predictors using
#the hatvalues() function
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
#which.max() function identifies the index of the largest element of a
#vecor.
#3.6.3 Multiple Linear Regression
#syntax lm(y~x1+x2+x3)
lm.fit=lm(medv~lstat+age)
summary(lm.fit)
#all the predictors
lm.fit=lm(medv~., data=Boston)
summary(lm.fit)
library(car)
vif(lm.fit)
#summary(lm.fit)$r.sq gives us the R2 and summary(lm.fit)$sigma gives
#us the RSE
#regression using all predictors except age
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
#alternatively, update() function can be used
lm.fit1=update(lm.fit, ~.-age)
#3.6.4 Interaction Terms
# the syntax lstat:black tells R to include an interaction term between
#lstat and black. the syntax lstat*age simulaneously include lstat,age
#and the interation term lstat*age as predictors; it is shorthand for
#lstat+age+lstat:age
summary(lm(medv~lstat*age),data=Boston)
#3.6.5 Non-linear transformations of the predictors
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
#we should the anova() function to further quantify the extent to which
#the quadratic fit is superior to the linrear fit
lm.fit=lm(medv~lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit1)
plot(lm.fit2)
#for higher-order polynomial regression, we can use poly() function to
#create the polynomial within lm()
lm.fit5=lm(medv~poly(lstat,5))
summary(lm.fit5)
#we can also use log transformation
summary(lm(medv~log(rm),data=Boston))
fix(Carseats)
names(Carsears)
names(Carseats)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carsears)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carseats)
summary(lm.fit)
?contrasts
contrasts(Carseats$ShelveLoc)
set.seed(123456)
?sample
sample(c(1,2,3,4,5,6),1)
sample(c(1,2,3,4,5,6),100,replace=T)
dice_sum <- function(k=2, B=100){
a=c()
for (i in 1:k){
a[i]=samle(c(1,2,3,4,5,6),B,replace=T)
}
return(sum(a))
}
dice_sum()
dice_sum <- function(k=2, B=100){
a=c()
for (i in 1:k){
a[i]=sample(c(1,2,3,4,5,6),B,replace=T)
}
return(sum(a))
}
dice_sum()
a=c()
a[1]=sample(c(1,2,3,4,5,6),100,replace=T)
a[1]
dice_sum <- function(k=2, B=100){
b=c()
for (i in 1:k){
a=sample(c(1,2,3,4,5,6),B,replace=T)
b=b+a
}
return(b)
}
dice_sum()
b=c()
a=sample(c(1,2,3,4,5,6),100,replace=T)
a
b
a+b
b=rep(o,100)
b=rep(0,100)
b
a+b
dice_sum <- function(k=2, B=100){
b=c(rep(0,B))
for (i in 1:k){
a=sample(c(1,2,3,4,5,6),B,replace=T)
b=b+a
}
return(b)
}
dice_sum()
phrases <- c("dog", "doggy", "den", "good boy", "Really?", "How much?", "Only $8", "dogdogdog", "Oh god")
a=substring(phrases,2,)
a
text1=grep("o",a)
text1
b=substring(phrases,1,1)
b
text2=grep("d",b)
text2
no.punct=length(grep("[[:punct:]]",phrases))
no.punct
?paste
even=paste(even,2:2000,sep="")
even=paste(even,2:2000,sep="")
even=paste("even",2:2000,sep="")
even
even=paste("even",2:2000:2,sep="")
even=paste("even",c(2:2000,sep=2),sep="")
even
length(even)
?seq
even=paste("even",seq(2,2000,sep=2),sep="")
even=paste("even",seq(2,2000,2),sep="")
even
length(even)
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
hotelCal.split=strsplit(tolower(hotelCal.split)," ")
hotelCal.split=strsplit(tolower(hotelCal)," ")
hotelCal.split
hotelCal.split=gsub("[[:punct:]]",hotelCal.split)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
# hotelCal.split <- <your code here>
hotelCal.split=strsplit(tolower(hotelCal)," ")
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split=strsplit(tolower(hotelCal.split)," ")
hotelCal.split
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
hotelCal.split=tolower(hotelCal.split)
hotelCal.split=tolower(hotelCal)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split=strsplit(hotelCal.split," ")
hotelCal.split
hotelCal.split=tolower(hotelCal)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split=unlist(strsplit(hotelCal.split," "))
c=c('May, 2008', 'June, 2011')
c
c[1]
c[2]
dates=c('May, 2008', 'June, 2011')
old.yr=2008
grep("old.yr",dates)
grep(old.yr,dates)
gsub(old.yr,2015,dates)
updateDate <- function(dates, old.yr) {
return(gsub(old.yr,2015,dates))
}
undateDate(dates,old.yr)
updateDate(dates,old.yr)
abbreviate <- function(vector, k){
return(substring(vector,1,k))
}
abbreviate(hotelCal.split,3)
set.seed(123456)
###########################################################
#### Stat 133 Midterm 4
# leave this here:
set.seed(123456)
#### Simulation
# Write a function, [dice_sum()], that takes as input:
# [k] : the number of dice rolled
# [B] : the number of rolls
# and returns:
# [dsum] : a vector of length B where each element is the sum of a roll of k dice
# So if k=1 pick a number between 1 and 6 at random B times and return them,
# if k=2 then in each roll you pick twice a number between 1 and 6 at random,
# calculate their sum, do this B times and return
# and so on.
# We've set the default inputs to k=2 and B=100
dice_sum <- function(k=2, B=100){
b=c(rep(0,B))
for (i in 1:k){
a=sample(c(1,2,3,4,5,6),B,replace=T)
b=b+a
}
return(b)
}
#### String manipulation
phrases <- c("dog", "doggy", "den", "good boy", "Really?", "How much?", "Only $8", "dogdogdog", "Oh god")
# Create a vector [text1] that lists the elements in phrases
# where the SECOND TO LAST character is "o" (lower case o).
#text1 <- <your code here>
a=substring(phrases,2,)
text1=grep("o",a)
# Create a vector [text2] that lists the elements in phrases that
# START with the letter "d"
#text2 <- <your code here>
b=substring(phrases,1,1)
text2=grep("d",b)
# Create a variable [no.punct] that equals the number of phrases with a punctuation mark in it.
# no.punct <- <your code here>
no.punct=length(grep("[[:punct:]]",phrases))
# Create a vector [even] that is of length 1000 and has the entries
# "even2", "even4", ...
# with no separation between the word and the letter
#even <- <your code here>
even=paste("even",seq(2,2000,2),sep="")
# Start with [hotelCal] which is a character string, create
# a _vector_ (not list) [hotelCal.split] which
# stores the words of [hotelCal] each as a separate element.
# Also, convert all upper case letters to lower case.
# Please remove all punctuation marks.
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
# hotelCal.split <- <your code here>
hotelCal.split=tolower(hotelCal)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split=unlist(strsplit(hotelCal.split," "))
# Write a function called updateDate. Your function should take the following
# arguments
#   <dates>: a character vector of dates of the form "month, year" (e.g. "May, 2001")
#   <old.yr>: a string indicating the year for which elements will be updated
#     (e.g. "2002")
#
# and return the following
#   <updated.dates>: a character vector of dates where <old.yr> has been replaced by
#     '2015'. This vector should only contain the elements whose date has been
#     updated. For example updateDate(c('May, 2008', 'June, 2011'), '2008') should
#     return 'May, 2015'.
updateDate <- function(dates, old.yr) {
return(gsub(old.yr,2015,dates))
}
# Write a function called [abbreviate] that takes in a vector of strings and returns
# a vector of the same length with only the first [k] characters from the orignal vector entries.
abbreviate <- function(vector, k){
return(substring(vector,1,k))
}
dice_sum(1,100)
dice_sum(1,10)
dice_sum(1,10)
dice_sum(2,12)
dice_sum(10,40)
even=paste("even",seq(2,2000,2),sep="")
even
length(even)
hotelCal
hotelCal.split
hotelCal.split=tolower(hotelCal)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split,collapse="")
?gsub
hotelCal.split=tolower(hotelCal)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split=unlist(strsplit(hotelCal.split," "))
hotelCal.split=tolower(hotelCal)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split
hotelCal.split=gsub("  "," ",hotelCal.split)
hotelCal.split
hotelCal.split=unlist(strsplit(hotelCal.split," "))
hotelCal.split
length(hotelCal.split)
updateDate(c('May, 2008', 'June, 2011'), '2008')
updateDate <- function(dates, old.yr) {
return(gsub(old.yr,2015,dates[prep(old.yr,dates)]))
}
updateDate(c('May, 2008', 'June, 2011'), '2008')
###########################################################
#### Stat 133 Midterm 4
# leave this here:
set.seed(123456)
#### Simulation
# Write a function, [dice_sum()], that takes as input:
# [k] : the number of dice rolled
# [B] : the number of rolls
# and returns:
# [dsum] : a vector of length B where each element is the sum of a roll of k dice
# So if k=1 pick a number between 1 and 6 at random B times and return them,
# if k=2 then in each roll you pick twice a number between 1 and 6 at random,
# calculate their sum, do this B times and return
# and so on.
# We've set the default inputs to k=2 and B=100
dice_sum <- function(k=2, B=100){
b=c(rep(0,B))
for (i in 1:k){
a=sample(c(1,2,3,4,5,6),B,replace=T)
b=b+a
}
return(b)
}
#### String manipulation
phrases <- c("dog", "doggy", "den", "good boy", "Really?", "How much?", "Only $8", "dogdogdog", "Oh god")
# Create a vector [text1] that lists the elements in phrases
# where the SECOND TO LAST character is "o" (lower case o).
#text1 <- <your code here>
a=substring(phrases,2,)
text1=grep("o",a)
# Create a vector [text2] that lists the elements in phrases that
# START with the letter "d"
#text2 <- <your code here>
b=substring(phrases,1,1)
text2=grep("d",b)
# Create a variable [no.punct] that equals the number of phrases with a punctuation mark in it.
# no.punct <- <your code here>
no.punct=length(grep("[[:punct:]]",phrases))
# Create a vector [even] that is of length 1000 and has the entries
# "even2", "even4", ...
# with no separation between the word and the letter
#even <- <your code here>
even=paste("even",seq(2,2000,2),sep="")
# Start with [hotelCal] which is a character string, create
# a _vector_ (not list) [hotelCal.split] which
# stores the words of [hotelCal] each as a separate element.
# Also, convert all upper case letters to lower case.
# Please remove all punctuation marks.
hotelCal <- "On a dark desert highway, cool wind in my hair. Warm smell of colitas, rising up through the air. Up ahead in the distance, I saw a shimmering light. My head grew heavy and my sight grew dim I had to stop for the night.  There she stood in the doorway; I heard the mission bell.  And I was thinking to myself: 'This could be heaven or this could be hell'. Then she lit up a candle and she showed me the way."
# hotelCal.split <- <your code here>
hotelCal.split=tolower(hotelCal)
hotelCal.split=gsub("[[:punct:]]","",hotelCal.split)
hotelCal.split=gsub("  "," ",hotelCal.split)
hotelCal.split=unlist(strsplit(hotelCal.split," "))
# Write a function called updateDate. Your function should take the following
# arguments
#   <dates>: a character vector of dates of the form "month, year" (e.g. "May, 2001")
#   <old.yr>: a string indicating the year for which elements will be updated
#     (e.g. "2002")
#
# and return the following
#   <updated.dates>: a character vector of dates where <old.yr> has been replaced by
#     '2015'. This vector should only contain the elements whose date has been
#     updated. For example updateDate(c('May, 2008', 'June, 2011'), '2008') should
#     return 'May, 2015'.
updateDate <- function(dates, old.yr) {
return(gsub(old.yr,2015,dates[grep(old.yr,dates)]))
}
# Write a function called [abbreviate] that takes in a vector of strings and returns
# a vector of the same length with only the first [k] characters from the orignal vector entries.
abbreviate <- function(vector, k){
return(substring(vector,1,k))
}
updateDate(c('May, 2008', 'June, 2011'), '2008')
abbreviate(hotelCal.split,2)
length(abbreviate(hotelCal.split,2))
setwd("C:/Users/Zirui/src/stat133/final2014")
load("family.rda")
load("KaiserBabies.rda")
plot(infants$bwt,infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch="*")
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch="*")
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=*)
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=1)
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=2)
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=3)
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=4)
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=5)
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=6)
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=7)
plot(infants$bwt~infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col="red",pch=8)
?abline
plot(infants$bwt,infants$gestation,xlab="the birthweight of infants", ylab="the gestation of infants",col=NA)
points(infants$bwt,infants$gestation,pch="*")
abline(h=259)
plot(infants$bwt ~ infants$gestation, pch='*', col="red", xlab="Gestation in days", ylab="Birth weight in oz")
abline(v=259)
hist(infants$age, prob=T, xlab="Mother's age")
lines(density(infants$age, na.rm=T), col="blue")
?hist
hist(infants$age)
hist(infants$age,xlab="mothers's age")
density(infants$age)
density(infants$age,na.rm=T)
lines(density(infants$age,na.rm=T))
lines(density(infants$age,na.rm=T))
density(infants$age,na.rm=T,prob=T)
hist(infants$age,xlab="mothers's age",prob=T)
?hist
hist(infants$age,xlab="mothers's age",prob=F)
hist(infants$age,xlab="mothers's age",prob=T)
hist(infants$age, prob=T, xlab="Mother's age")
lines(density(infants$age, na.rm=T), col="blue")
load("Cache500.rda")
first.cache <- sapply(Cache500, "[", 1)
# corresponding vector in the list Cache500
first.cache <- c()
for (i in 1:length(Cache500))
first.cache[i]=Cache500[[i]][1]
first.cache <- sapply(Cache500, [1])
first.cache <- sapply(Cache500, "[",1)
first.cache <- sapply(Cache500, "[",2)
first.cache <- sapply(Cache500, "[",1)
first.cache <- sapply(Cache500, "]",1)
first.cache <- sapply(Cache500, "[",1)
(by(iris$Petal.Width, iris$Species, max)
)
?by
dim(family)
firstColToNames <- function(m){
# students do not need to include this test
if(length(dim(m))!=2) print("m is not a matrix or dataframe")
else{
names <- as.character(m[,1])
m <- m[, -1]
rownames(m) <- names
return(m)
}
}
fisrtColNames(family)
firstColNames(family)
firstColToNames(family)
rep(1:13,each=4)
l <- lapply(1:12, function(x) rpois(100, 5))
plot(iris$Petal.Width ~ iris$Petal.Length,
xlab = "Petal Length", ylab = "Petal Width", col = iris$Species)
first.cache=as.vector(sapply(Cache500,head,n=1))
first.cache=as.vector(sapply(Cache500,head,n=1))
sapply(Cache500,head,n=1)
first.cache=unlist(sapply(Cache500,head,n=1))
